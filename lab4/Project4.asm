//--------------------------------------------------------------------------------------
// ASM - модуль программы
//--------------------------------------------------------------------------------------
#include <def21060.h>
// для использования макросов
#include <asm_sprt.h>
// константы
#include "Project4.h"

.global _SetupSPORT;

//--------------------------------------------------------------------------------------
.section/dm seg_dmda;

.VAR InBuffer1[cnN];
.VAR InBuffer2[cnN];
.VAR TCB_input1[8] = 0, 0, 0, InBuffer2 - 0x20000,
					TCB_Block2+7, 	// ссылка на противоположный блок (регистр CP (если не надо прерывания еще  0x20000))
					@InBuffer1,		// кол-во элементов (регистр C   счетчик)
					1,				// регистр IM   модификатор адреса
					InBuffer1;		// регистр II   адрес буфера
.VAR TCB_input2[8] = 0, 0, 0, InBuffer1 - 0x20000,
					TCB_Block1+7, 	// ссылка на противоположный блок (регистр CP (если не надо прерывания еще  0x20000))
					@InBuffer2,		// кол-во элементов (регистр C   счетчик)
					1,				// регистр IM   модификатор адреса
					InBuffer2;		// регистр II   адрес буфера
					

.VAR OutBuffer1[cnN];
.VAR OutBuffer2[cnN];
.VAR TCB_output1[8] = 0, 0, 0, OutBuffer2 - 0x20000,
					TCB_BlockOut2+7, 	// ссылка на противоположный блок (регистр CP (если не надо прерывания еще  0x20000))
					@OutBuffer1,		// кол-во элементов (регистр C   счетчик)
					1,					// регистр IM   модификатор адреса
					OutBuffer1;			// регистр II   адрес буфера
.VAR TCB_output2[8] = 0, 0, 0, OutBuffer1 - 0x20000,
					TCB_BlockOut1+7, 	// ссылка на противоположный блок (регистр CP (если не надо прерывания еще  0x20000))
					@OutBuffer2,		// кол-во элементов (регистр C   счетчик)
					1,					// регистр IM   модификатор адреса
					OutBuffer2;			// регистр II   адрес буфера
					

//
.section/pm seg_pmco;


//--------------------------------------------------------------------------------------
// запись значения в регистр IOP-процессора
// void SetupSPORT( int Type, 				// Тип (0 - in, 1 - out) - R4
//					int RegValue1, 			// Значение для SRCTL/STCTL - R8
//					int RegValue1)			// Значение для DIV - R12
//--------------------------------------------------------------------------------------
// R4 - Type, R8 - RegularValue1, R12 - RegularValue2
//--------------------------------------------------------------------------------------
_SetupSPORT:
	R4 = PASS R4;
	IF NE jump transmit;
	DM(RDIV0) = R12;
	R12 = TCB_input1+7;
	DM(CP0) = R12;
	DM(SRCTL0) = R8;
	jump finish;
	
transmit:
	DM(TDIV0) = R12;
	R12 = TCB_output1+7;
	DM(cp2) = R12;
	DM(STCTL0) = R8;
	R8 = -1.0;
	DM(TX0) = R8;
	
finish:
	I12 = DM(-1, R6);
	jump (M14, I12) (db);
		nop;
		rframe;

_SetupSPORT.end:
	nop;
//--------------------------------------------------------------------------------------